"use strict";
/**
 * This file was auto-generated by Fern from our API Definition.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ElevenLabsClient = void 0;
const environments = __importStar(require("./environments"));
const core = __importStar(require("./core"));
const ElevenLabs = __importStar(require("./api/index"));
const url_join_1 = __importDefault(require("url-join"));
const errors = __importStar(require("./errors/index"));
const Client_1 = require("./api/resources/history/client/Client");
const Client_2 = require("./api/resources/textToSoundEffects/client/Client");
const Client_3 = require("./api/resources/audioIsolation/client/Client");
const Client_4 = require("./api/resources/samples/client/Client");
const Client_5 = require("./api/resources/textToSpeech/client/Client");
const Client_6 = require("./api/resources/speechToSpeech/client/Client");
const Client_7 = require("./api/resources/voiceGeneration/client/Client");
const Client_8 = require("./api/resources/textToVoice/client/Client");
const Client_9 = require("./api/resources/user/client/Client");
const Client_10 = require("./api/resources/voices/client/Client");
const Client_11 = require("./api/resources/studio/client/Client");
const Client_12 = require("./api/resources/projects/client/Client");
const Client_13 = require("./api/resources/dubbing/client/Client");
const Client_14 = require("./api/resources/models/client/Client");
const Client_15 = require("./api/resources/audioNative/client/Client");
const Client_16 = require("./api/resources/usage/client/Client");
const Client_17 = require("./api/resources/pronunciationDictionary/client/Client");
const Client_18 = require("./api/resources/workspace/client/Client");
const Client_19 = require("./api/resources/speechToText/client/Client");
const Client_20 = require("./api/resources/conversationalAi/client/Client");
class ElevenLabsClient {
    constructor(_options = {}) {
        this._options = _options;
    }
    get history() {
        var _a;
        return ((_a = this._history) !== null && _a !== void 0 ? _a : (this._history = new Client_1.History(this._options)));
    }
    get textToSoundEffects() {
        var _a;
        return ((_a = this._textToSoundEffects) !== null && _a !== void 0 ? _a : (this._textToSoundEffects = new Client_2.TextToSoundEffects(this._options)));
    }
    get audioIsolation() {
        var _a;
        return ((_a = this._audioIsolation) !== null && _a !== void 0 ? _a : (this._audioIsolation = new Client_3.AudioIsolation(this._options)));
    }
    get samples() {
        var _a;
        return ((_a = this._samples) !== null && _a !== void 0 ? _a : (this._samples = new Client_4.Samples(this._options)));
    }
    get textToSpeech() {
        var _a;
        return ((_a = this._textToSpeech) !== null && _a !== void 0 ? _a : (this._textToSpeech = new Client_5.TextToSpeech(this._options)));
    }
    get speechToSpeech() {
        var _a;
        return ((_a = this._speechToSpeech) !== null && _a !== void 0 ? _a : (this._speechToSpeech = new Client_6.SpeechToSpeech(this._options)));
    }
    get voiceGeneration() {
        var _a;
        return ((_a = this._voiceGeneration) !== null && _a !== void 0 ? _a : (this._voiceGeneration = new Client_7.VoiceGeneration(this._options)));
    }
    get textToVoice() {
        var _a;
        return ((_a = this._textToVoice) !== null && _a !== void 0 ? _a : (this._textToVoice = new Client_8.TextToVoice(this._options)));
    }
    get user() {
        var _a;
        return ((_a = this._user) !== null && _a !== void 0 ? _a : (this._user = new Client_9.User(this._options)));
    }
    get voices() {
        var _a;
        return ((_a = this._voices) !== null && _a !== void 0 ? _a : (this._voices = new Client_10.Voices(this._options)));
    }
    get studio() {
        var _a;
        return ((_a = this._studio) !== null && _a !== void 0 ? _a : (this._studio = new Client_11.Studio(this._options)));
    }
    get projects() {
        var _a;
        return ((_a = this._projects) !== null && _a !== void 0 ? _a : (this._projects = new Client_12.Projects(this._options)));
    }
    get dubbing() {
        var _a;
        return ((_a = this._dubbing) !== null && _a !== void 0 ? _a : (this._dubbing = new Client_13.Dubbing(this._options)));
    }
    get models() {
        var _a;
        return ((_a = this._models) !== null && _a !== void 0 ? _a : (this._models = new Client_14.Models(this._options)));
    }
    get audioNative() {
        var _a;
        return ((_a = this._audioNative) !== null && _a !== void 0 ? _a : (this._audioNative = new Client_15.AudioNative(this._options)));
    }
    get usage() {
        var _a;
        return ((_a = this._usage) !== null && _a !== void 0 ? _a : (this._usage = new Client_16.Usage(this._options)));
    }
    get pronunciationDictionary() {
        var _a;
        return ((_a = this._pronunciationDictionary) !== null && _a !== void 0 ? _a : (this._pronunciationDictionary = new Client_17.PronunciationDictionary(this._options)));
    }
    get workspace() {
        var _a;
        return ((_a = this._workspace) !== null && _a !== void 0 ? _a : (this._workspace = new Client_18.Workspace(this._options)));
    }
    get speechToText() {
        var _a;
        return ((_a = this._speechToText) !== null && _a !== void 0 ? _a : (this._speechToText = new Client_19.SpeechToText(this._options)));
    }
    get conversationalAi() {
        var _a;
        return ((_a = this._conversationalAi) !== null && _a !== void 0 ? _a : (this._conversationalAi = new Client_20.ConversationalAi(this._options)));
    }
    /**
     * @param {string} taskId - The ID task to claim.
     * @param {ElevenLabsClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.claimATaskV1SpeechToTextReviewsTasksTaskIdClaimPost("task_id")
     */
    claimATaskV1SpeechToTextReviewsTasksTaskIdClaimPost(taskId, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b;
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_b = (_a = (yield core.Supplier.get(this._options.baseUrl))) !== null && _a !== void 0 ? _a : (yield core.Supplier.get(this._options.environment))) !== null && _b !== void 0 ? _b : environments.ElevenLabsEnvironment.Production, `v1/speech-to-text/reviews/tasks/${encodeURIComponent(taskId)}/claim`),
                method: "POST",
                headers: Object.assign({ "xi-api-key": (yield core.Supplier.get(this._options.apiKey)) != null
                        ? yield core.Supplier.get(this._options.apiKey)
                        : undefined, "X-Fern-Language": "JavaScript", "X-Fern-SDK-Name": "elevenlabs", "X-Fern-SDK-Version": "1.52.0", "User-Agent": "elevenlabs/1.52.0", "X-Fern-Runtime": core.RUNTIME.type, "X-Fern-Runtime-Version": core.RUNTIME.version }, requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers),
                contentType: "application/json",
                requestType: "json",
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return _response.body;
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 422:
                        throw new ElevenLabs.UnprocessableEntityError(_response.error.body);
                    default:
                        throw new errors.ElevenLabsError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.ElevenLabsError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.ElevenLabsTimeoutError("Timeout exceeded when calling POST /v1/speech-to-text/reviews/tasks/{task_id}/claim.");
                case "unknown":
                    throw new errors.ElevenLabsError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * @param {string} userId
     * @param {string} taskId - The ID task review to claim.
     * @param {ElevenLabsClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.submitACompletedTaskV1SpeechToTextReviewsProducersUserIdTasksTaskIdSubmitPut("user_id", "task_id")
     */
    submitACompletedTaskV1SpeechToTextReviewsProducersUserIdTasksTaskIdSubmitPut(userId, taskId, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b;
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_b = (_a = (yield core.Supplier.get(this._options.baseUrl))) !== null && _a !== void 0 ? _a : (yield core.Supplier.get(this._options.environment))) !== null && _b !== void 0 ? _b : environments.ElevenLabsEnvironment.Production, `v1/speech-to-text/reviews/producers/${encodeURIComponent(userId)}/tasks/${encodeURIComponent(taskId)}/submit`),
                method: "PUT",
                headers: Object.assign({ "xi-api-key": (yield core.Supplier.get(this._options.apiKey)) != null
                        ? yield core.Supplier.get(this._options.apiKey)
                        : undefined, "X-Fern-Language": "JavaScript", "X-Fern-SDK-Name": "elevenlabs", "X-Fern-SDK-Version": "1.52.0", "User-Agent": "elevenlabs/1.52.0", "X-Fern-Runtime": core.RUNTIME.type, "X-Fern-Runtime-Version": core.RUNTIME.version }, requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers),
                contentType: "application/json",
                requestType: "json",
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return _response.body;
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 422:
                        throw new ElevenLabs.UnprocessableEntityError(_response.error.body);
                    default:
                        throw new errors.ElevenLabsError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.ElevenLabsError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.ElevenLabsTimeoutError("Timeout exceeded when calling PUT /v1/speech-to-text/reviews/producers/{user_id}/tasks/{task_id}/submit.");
                case "unknown":
                    throw new errors.ElevenLabsError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * @param {ElevenLabs.ListTasksRequest} request
     * @param {ElevenLabsClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.listUnclaimedReviewsV1SpeechToTextReviewsTasksPost({
     *         tags: [[{
     *                     kind: "lang",
     *                     value: "value"
     *                 }]]
     *     })
     */
    listUnclaimedReviewsV1SpeechToTextReviewsTasksPost(request, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b;
            const { page_size: pageSize, cursor } = request, _body = __rest(request, ["page_size", "cursor"]);
            const _queryParams = {};
            if (pageSize != null) {
                _queryParams["page_size"] = pageSize.toString();
            }
            if (cursor != null) {
                _queryParams["cursor"] = cursor;
            }
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_b = (_a = (yield core.Supplier.get(this._options.baseUrl))) !== null && _a !== void 0 ? _a : (yield core.Supplier.get(this._options.environment))) !== null && _b !== void 0 ? _b : environments.ElevenLabsEnvironment.Production, "v1/speech-to-text/reviews/tasks"),
                method: "POST",
                headers: Object.assign({ "xi-api-key": (yield core.Supplier.get(this._options.apiKey)) != null
                        ? yield core.Supplier.get(this._options.apiKey)
                        : undefined, "X-Fern-Language": "JavaScript", "X-Fern-SDK-Name": "elevenlabs", "X-Fern-SDK-Version": "1.52.0", "User-Agent": "elevenlabs/1.52.0", "X-Fern-Runtime": core.RUNTIME.type, "X-Fern-Runtime-Version": core.RUNTIME.version }, requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers),
                contentType: "application/json",
                queryParameters: _queryParams,
                requestType: "json",
                body: _body,
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return _response.body;
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 422:
                        throw new ElevenLabs.UnprocessableEntityError(_response.error.body);
                    default:
                        throw new errors.ElevenLabsError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.ElevenLabsError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.ElevenLabsTimeoutError("Timeout exceeded when calling POST /v1/speech-to-text/reviews/tasks.");
                case "unknown":
                    throw new errors.ElevenLabsError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * @param {string} userId
     * @param {ElevenLabs.ListTasksInstancesForAUserV1SpeechToTextReviewsProducersUserIdTasksGetRequest} request
     * @param {ElevenLabsClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.listTasksInstancesForAUserV1SpeechToTextReviewsProducersUserIdTasksGet("user_id")
     */
    listTasksInstancesForAUserV1SpeechToTextReviewsProducersUserIdTasksGet(userId_1) {
        return __awaiter(this, arguments, void 0, function* (userId, request = {}, requestOptions) {
            var _a, _b;
            const { page_size: pageSize, cursor } = request;
            const _queryParams = {};
            if (pageSize != null) {
                _queryParams["page_size"] = pageSize.toString();
            }
            if (cursor != null) {
                _queryParams["cursor"] = cursor;
            }
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_b = (_a = (yield core.Supplier.get(this._options.baseUrl))) !== null && _a !== void 0 ? _a : (yield core.Supplier.get(this._options.environment))) !== null && _b !== void 0 ? _b : environments.ElevenLabsEnvironment.Production, `v1/speech-to-text/reviews/producers/${encodeURIComponent(userId)}/tasks`),
                method: "GET",
                headers: Object.assign({ "xi-api-key": (yield core.Supplier.get(this._options.apiKey)) != null
                        ? yield core.Supplier.get(this._options.apiKey)
                        : undefined, "X-Fern-Language": "JavaScript", "X-Fern-SDK-Name": "elevenlabs", "X-Fern-SDK-Version": "1.52.0", "User-Agent": "elevenlabs/1.52.0", "X-Fern-Runtime": core.RUNTIME.type, "X-Fern-Runtime-Version": core.RUNTIME.version }, requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers),
                contentType: "application/json",
                queryParameters: _queryParams,
                requestType: "json",
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return _response.body;
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 422:
                        throw new ElevenLabs.UnprocessableEntityError(_response.error.body);
                    default:
                        throw new errors.ElevenLabsError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.ElevenLabsError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.ElevenLabsTimeoutError("Timeout exceeded when calling GET /v1/speech-to-text/reviews/producers/{user_id}/tasks.");
                case "unknown":
                    throw new errors.ElevenLabsError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
    /**
     * @param {ElevenLabs.QuoteRequestModel} request
     * @param {ElevenLabsClient.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link ElevenLabs.UnprocessableEntityError}
     *
     * @example
     *     await client.computeAQuoteForAAsrTranscriptionReviewTaskV1SpeechToTextReviewsGetQuotePost({
     *         content_hash: "content_hash",
     *         duration_s: 1.1,
     *         speaker_count: 1,
     *         language: "language"
     *     })
     */
    computeAQuoteForAAsrTranscriptionReviewTaskV1SpeechToTextReviewsGetQuotePost(request, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b;
            const _response = yield core.fetcher({
                url: (0, url_join_1.default)((_b = (_a = (yield core.Supplier.get(this._options.baseUrl))) !== null && _a !== void 0 ? _a : (yield core.Supplier.get(this._options.environment))) !== null && _b !== void 0 ? _b : environments.ElevenLabsEnvironment.Production, "v1/speech-to-text/reviews/get-quote"),
                method: "POST",
                headers: Object.assign({ "xi-api-key": (yield core.Supplier.get(this._options.apiKey)) != null
                        ? yield core.Supplier.get(this._options.apiKey)
                        : undefined, "X-Fern-Language": "JavaScript", "X-Fern-SDK-Name": "elevenlabs", "X-Fern-SDK-Version": "1.52.0", "User-Agent": "elevenlabs/1.52.0", "X-Fern-Runtime": core.RUNTIME.type, "X-Fern-Runtime-Version": core.RUNTIME.version }, requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.headers),
                contentType: "application/json",
                requestType: "json",
                body: request,
                timeoutMs: (requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.timeoutInSeconds) != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                maxRetries: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.maxRetries,
                abortSignal: requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.abortSignal,
            });
            if (_response.ok) {
                return _response.body;
            }
            if (_response.error.reason === "status-code") {
                switch (_response.error.statusCode) {
                    case 422:
                        throw new ElevenLabs.UnprocessableEntityError(_response.error.body);
                    default:
                        throw new errors.ElevenLabsError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.body,
                        });
                }
            }
            switch (_response.error.reason) {
                case "non-json":
                    throw new errors.ElevenLabsError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.rawBody,
                    });
                case "timeout":
                    throw new errors.ElevenLabsTimeoutError("Timeout exceeded when calling POST /v1/speech-to-text/reviews/get-quote.");
                case "unknown":
                    throw new errors.ElevenLabsError({
                        message: _response.error.errorMessage,
                    });
            }
        });
    }
}
exports.ElevenLabsClient = ElevenLabsClient;
